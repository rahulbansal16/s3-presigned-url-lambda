# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: s3-presigned-url

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    S3_BUCKET: { Ref: S3Bucket }
    DYNAMODB_TABLE: videos
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/videos"

functions:
  signedUrl:
    handler: handler.signedUrl
    events:
      - http:
          path: /signed-upload-url
          method: GET
          cors:
            origin: '*'
  addToDbTest:
    handler: handler.addToDbTest
    events:
      - http:
          path: /test/db
          method: GET
          cors:
            origin: '*'
  startRequest:
    handler: handler.startRequest
    events:
      - http:
          path: /upload/start
          method: GET
          cors:
            origin: '*'
  uploadURL:
    handler: handler.uploadURL
    events:
      - http:
          path: /upload/url
          method: GET
          cors:
            origin: '*'
  partialUpload:
    handler: handler.partialUpload
    events:
      - http:
          path: /upload/partial
          method: POST
          cors:
            origin: '*'
  completeUpload:
    handler: handler.completeUpload
    events:
      - http:
          path: /upload/complete
          method: POST
          cors:
            origin: '*'
  singleUpload:
    handler: handler.singleUpload
    events:
      - http:
          path: /upload/single
          method: POST
          cors:
            origin: '*'
  fetchUrl:
    handler: handler.fetchUrl
    events:
      - http:
          path: /video
          method: GET
          cors:
            origin: '*'

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, POST, PUT]
              AllowedOrigins: ['*']
    S3BucketPolicy: # Allow uploaded files to be public and downloadable
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: S3Bucket }
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Allow'
              Resource: { Fn::Join: ['', [{ Fn::GetAtt: [S3Bucket, Arn] }, '/*']] } # arn:aws:s3:::bucketName/*
              Principal: '*'
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # TableName: videoMapping
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: videos
